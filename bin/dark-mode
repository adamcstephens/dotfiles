#!/usr/bin/env python

import argparse
import os
import platform
import subprocess
import sys


def run(command):
    return subprocess.run(command.split(" "), capture_output=True).stdout.decode(
        "utf-8"
    )


def set_darwin_theme(target):
    if target:
        run("/usr/local/bin/dark-mode on")
    else:
        run("/usr/local/bin/dark-mode off")


def set_gtk_theme(target):
    if target:
        theme = "Adwaita-dark"
    else:
        theme = "Adwaita"

    run(f"gsettings set org.gnome.desktop.interface gtk-theme {theme}")


def set_kitty_theme(target):
    if target:
        run("kitty @ set-colors --reset")
    else:
        run("kitty @ set-colors --all --configured ~/.config/kitty/theme-light.conf")


def set_sway_theme(target):
    if target:
        theme = {
            "client.focused": "#9ed06c #2b2d3a #9ed06c #f89860",
            "client.unfocused": "#7e8294 #2b2d3a #7e8294 #f89860",
            "client.focused_inactive": "#7e8294 #2b2d3a #7e8294 #f89860",
        }

        background = "#181a1c solid_color"
    else:
        theme = {
            "client.focused": "#001080 #ffffff #a31515 #f89860",
            "client.unfocused": "#2b2d3a #ffffff #7e8294 #f89860",
            "client.focused_inactive": "#001080 #ffffff #7e8294 #f89860",
        }

        background = "#7e8294 solid_color"
    for setting, value in theme.items():
        subprocess.run(["swaymsg", setting, value], capture_output=True)

    subprocess.run(
        ["swaymsg", "output", "eDP-1", "background", background], capture_output=True
    )


def set_waybar_theme(target):
    if target:
        theme = f"{os.environ['HOME']}/.dotfiles/waybar.css"
    else:
        theme = f"{os.environ['HOME']}/.dotfiles/waybar-light.css"

    style_file = f"{os.environ['HOME']}/.config/waybar/style.css"
    os.unlink(style_file)
    os.symlink(
        src=theme,
        dst=style_file,
    )
    print(run("systemctl --user restart waybar"))


def set_dark(target):
    print(f"setting dark mode to {target}")

    os = platform.system()

    set_kitty_theme(target)

    if os == "Linux":
        set_gtk_theme(target)
        set_sway_theme(target)
        set_waybar_theme(target)
    elif os == "Darwin":
        set_darwin_theme(target)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Control Dark Mode")
    parser.add_argument(
        "target",
        type=str,
        help="set the target dark state",
        choices=["enable", "disable"],
    )

    args = parser.parse_args()

    if args.target == "enable":
        set_dark(True)
    elif args.target == "disable":
        set_dark(False)
    else:
        print("unknown target state")
        sys.exit(1)
