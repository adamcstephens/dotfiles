#!/usr/bin/env nu

let nixpkgs_root = $env.HOME + "/git/nixpkgs"

def get_worktree [branch: string] {
  $nixpkgs_root + "-worktree/" + ($branch | str replace "/" "-")
}

def workdir [branch: string, ] {
  let worktree = get_worktree $branch

  if not ($worktree | path dirname | path exists) {
    mkdir -v ($worktree | path dirname)
  }

  cd $nixpkgs_root

  let branch_test = do { git rev-parse --verify $branch } | complete
  let worktree_args = (if ($branch_test.exit_code != 0) { ["-b", $branch, "--track"] } else { [$branch] }) ++ ["--checkout", "--lock"]

  if not ($worktree | path exists) {
    print ($worktree_args | prepend $worktree)
    git worktree add $worktree $worktree_args

    cd $worktree
    git push --set-upstream origin $"($branch):($branch)"
    cd -
  }

  if not (($worktree + "/.envrc") | path exists) {
    cd $worktree
    "use flake ~/.dotfiles#nixpkgs" | save ".envrc"
    direnv allow
  }

  zoxide add $worktree

  $worktree
}

def clean_workdir [branch: string] {
  let worktree = get_worktree $branch
  cd $nixpkgs_root

  git worktree remove -ff $worktree
  git branch -D $branch
}

def main [--codium (-c), --emacs (-e), --prj (-p), action: string, name: string] {
  if ($action == "workdir") {
    let worktree = workdir $name
    if $emacs {
      em $worktree
    } else if ($codium) {
      codium -n $worktree
    } else if ($prj) {
      prj $worktree
    }

    if ($env.PWD != ($worktree | path expand)) and ("KITTY_WINDOW_ID" in $env) and ("DISPLAY" in $env or "WAYLAND_DISPLAY" in $env) {
      kitty --single-instance $worktree
      exec kitty @ close-window -m ("id:" + $env.KITTY_WINDOW_ID)
    }
  } else if ($action == "clean") {
    clean_workdir $name
  } else {
    print ("!! Unsupported command " + $action)
    exit 1
  }
}
