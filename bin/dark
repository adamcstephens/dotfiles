#!/usr/bin/env python3

import argparse
import json
import os
import platform
import subprocess
import sys

HOME = os.getenv("HOME")
state_file = HOME + "/.dotfiles/.dark-mode.state"
os_name = platform.system()

print(f"State file: {state_file}")


def run(command):
    print(f"Running: {command}")

    return subprocess.run(command.split(" "), capture_output=True).stdout.decode(
        "utf-8"
    )


def set_darwin_theme(target):
    if target:
        run("/opt/homebrew/bin/dark-mode on")
    else:
        run("/opt/homebrew/bin/dark-mode off")


def set_gtk_theme(target):
    if target:
        theme = "Adwaita-dark"
    else:
        theme = "Adwaita"

    run(f"bash -c gsettings-wrapper set org.gnome.desktop.interface gtk-theme {theme}")


def set_gnome_scheme(target):
    if target:
        theme = "prefer-dark"
    else:
        theme = "prefer-light"

    run(f"bash -c gsettings-wrapper set org.gnome.desktop.interface color-scheme {theme}")
    run(f"dconf write /org/gnome/desktop/interface/color-scheme \'{theme}\'")


def set_kitty_theme(target):
    try:
        kitty_pid = run("pgrep -af kitty").splitlines()[0].strip()
    except IndexError:
        print("kitty not running")
        return

    print(kitty_pid)

    if os_name == "Linux":
        kitty_socket = f"unix:@kitty-{kitty_pid}"
    elif os_name == "Darwin":
        tmpdir = os.getenv("TMPDIR")
        kitty_socket = f"unix:{tmpdir}/kitty-{kitty_pid}"

    cmd = f"kitty @ --to {kitty_socket} set-colors --all --configured {HOME}/.config/kitty/"

    if kitty_pid != "":
        if target:
            run(f"{cmd}theme-dark.conf")
        else:
            run(f"{cmd}theme-light.conf")

        print("Applied kitty theme")

    else:
        print("Kitty not running")


def set_waybar_theme(target):
    if target:
        theme = f"{os.environ['HOME']}/.dotfiles/waybar.css"
    else:
        theme = f"{os.environ['HOME']}/.dotfiles/waybar-light.css"

    style_file = f"{os.environ['HOME']}/.config/waybar/style.css"
    os.unlink(style_file)
    os.symlink(
        src=theme,
        dst=style_file,
    )
    print(run("systemctl --user restart waybar"))


def set_state_data(target):
    with open(state_file, "w") as sf:
        json.dump(target, sf)


def get_state_data():
    try:
        current = json.loads(open(state_file).read())
    except FileNotFoundError:
        return {}
    print(f"Current state: {current}")
    try:
        return current
    except FileNotFoundError:
        return {}


def set_dark(target):
    print(f"setting dark mode to {target}")

    if os_name == "Linux":
        set_gnome_scheme(target)
        set_gtk_theme(target)
        # set_waybar_theme(target)
    elif os_name == "Darwin":
        set_darwin_theme(target)

    set_kitty_theme(target)

    set_state_data(target)


def toggle_dark():
    set_dark(not get_state_data())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Control Dark Mode")
    parser.add_argument(
        "target",
        type=str,
        help="set the target dark state",
        choices=["enable", "disable", "toggle", "status"],
    )

    args = parser.parse_args()

    if args.target == "enable":
        set_dark(True)
    elif args.target == "disable":
        set_dark(False)
    elif args.target == "toggle":
        toggle_dark()
    elif args.target == "status":
        print(str(get_state_data()).lower())
    else:
        print("unknown target state")
        sys.exit(1)
