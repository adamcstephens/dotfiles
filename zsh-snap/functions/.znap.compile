#!/bin/zsh
# compile zsh source code asynchronously
# args: [ ( <dir> | <file> ) ... ]
zmodload -F zsh/files b:zf_rm
autoload -Uz add-zle-hook-widget

typeset -gHa _znap_compile_queue=()

.znap.compile() {
  _znap_compile_queue+=( ${@:-$PWD} )
  add-zle-hook-widget line-pre-redraw .znap.compile.next
}

.znap.compile.next() {
  emulate -L zsh; setopt $_znap_opts

  if [[ $1 == <-> ]]; then
    # Always unhook & close the last fd. Don't care what happened.
    zle -F $1 2> /dev/null
    exec {1}<&-
  fi

  if (( $#_znap_compile_queue == 0 )); then
    add-zle-hook-widget -d line-pre-redraw .znap.compile.next
    return 0
  fi

  (( KEYS_QUEUED_COUNT + PENDING > 0 )) &&
      return 0

  local fd src=$_znap_compile_queue[1]
  shift _znap_compile_queue
  exec {fd}< <(
    local -a sources=( $src ); [[ -d $src ]] &&
        sources=( $src/**~**.zwc~**/.git(|hub)(|/**)(-.)~**/.DS_Store~**.md(-.) )
    for src in $sources[@]; do
      [[ -w $src:h ]] ||
          return

      local bin=$src.zwc

      if [[ $bin -ot $src ]]; then
        zf_rm -f $bin 2>/dev/null ||
            return
      fi

      [[ -r $src ]] ||
          return

      local line
      IFS='' read -r line < $src
      if [[ $line != \#* ]]; then
        zf_rm -f $bin 2>/dev/null
        return
      fi

      [[ -e $bin ]] ||
          zcompile -Uz $src 2>/dev/null
    done
  )
  zle -F $fd .znap.compile.next

  return 0
}

.znap.compile "$@"
