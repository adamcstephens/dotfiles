#!/bin/bash
# vim: set ft=sh:

[ ! -d ~/projects ] && mkdir -vp ~/projects

OS=$(uname)
echo "Found OS: $OS"
if [[ "$OS" == 'Linux' ]]
then
  if [ -e /etc/arch-release ]
  then
    export DIST='arch'
  elif [ -e /etc/debian_version ]
  then
    export DIST='debian'
  elif [ -e /etc/fedora-release ]
  then
    export DIST='fedora'
  elif [ -e /etc/redhat-release ]
  then
    export DIST='redhat'
  elif grep CoreOS /etc/lsb-release &> /dev/null
  then
    export DIST='coreos'
  elif [ -e /etc/nixos ]
  then
    export DIST='nixos'
  fi
  echo "Found Linux Distribution: $DIST"
else
  DIST="$OS"
fi

# shellcheck disable=SC1091
[ -e /etc/lsb-release ] && source /etc/lsb-release
DISTRIB_ID=${DISTRIB_ID:-}

# get hostname
HOSTNAME=$(hostname)

# install the fresh binary
fresh freshshell/fresh bin/fresh --bin

export fresh_ondemand_path="shell/apps/ondemand"
export ondemand_path="$HOME/.dotfiles/${fresh_ondemand_path}"
function shell_ondemand() {
  shell="$1"

  for ondemand_app in $(find "$ondemand_path"/* | sed 's#.*/##' | cut -f 1 -d . | sort -u)
  do
    if command -v "$ondemand_app" &>/dev/null
    then
      if [[ -e "${ondemand_path}/${ondemand_app}.sh" ]]
      then
        fresh "${fresh_ondemand_path}/${ondemand_app}.sh"
        echo "${shell} (app): ${ondemand_app}.sh"
      fi
      if [[ -e "${ondemand_path}/${ondemand_app}.${shell}" ]]
      then
        fresh "${fresh_ondemand_path}/${ondemand_app}.${shell}"
        echo "${shell} (app): ${ondemand_app}.${shell}"
      fi
    fi
  done
  true
}

export fresh_shell_os_path="shell/os"
export shell_os_path="$HOME/.dotfiles/${fresh_shell_os_path}"
function shell_os() {
  shell="$1"
  if [[ -e "${shell_os_path}/${OS}.sh" ]]
  then
    fresh "${fresh_shell_os_path}/${OS}.sh"
    echo "${shell} (os): ${OS}.sh"
  fi
    if [[ -e "${shell_os_path}/${OS}.${shell}" ]]
  then
    fresh "${fresh_shell_os_path}/${OS}.${shell}"
    echo "${shell} (os): ${OS}.${shell}"
  fi
  if [[ "$OS" == 'Linux' ]] && [[ -e "${shell_os_path}/Linux/${DIST}.sh" ]]
  then
    fresh "${fresh_shell_os_path}/Linux/${DIST}.sh"
    echo "${shell} (os): Linux/${DIST}.sh"
  fi
}

#
# bash
#
if command -v bash &> /dev/null
then
  fresh-options --file=~/.bash_profile --marker
    fresh shell/fresh.sh
    fresh shell/generic.sh

    shell_os bash
    shell_ondemand bash

    fresh shell/bash/bash.bash
    fresh shell/notes.sh
    fresh shell/devlang.sh
  fresh-options
  fresh shell/bash/bashrc --file
fi

#
# zsh
#

if command -v zsh &> /dev/null
then
  if [[ ! -d ~/.zplug ]]
  then
    [[ -h ~/.zplug ]] && rm ~/.zplug
    git clone https://github.com/zplug/zplug ~/.zplug
  fi

  fresh-options --file=~/.zshrc --marker
    fresh shell/fresh.sh
    fresh shell/zsh/zshrc.zsh
    fresh shell/generic.sh

    fresh shell/zsh/zplug.zsh

    shell_os zsh
    shell_ondemand zsh

    fresh shell/notes.sh
    fresh shell/devlang.sh
    [[ -d $HOME/.asdf || -d /usr/local/Cellar/asdf ]] && fresh shell/asdf.sh
  fresh-options

  # clean compdump
  rm -f ~/.zcompdump
fi

#
# vim
#
if command -v vim &> /dev/null
then
  [ ! -d ~/.vim ] && mkdir -vp ~/.vim
  fresh-options --file=~/.vimrc
    fresh vim/vimrc
    fresh vim/plugins.vim
  fresh-options
  if command -v nvim &> /dev/null
  then
    [ ! -d ~/.config ] && mkdir -vp ~/.config
    [ ! -h ~/.config/nvim ] && ln -sfv ~/.vim ~/.config/nvim
    [ ! -h ~/.config/nvim/init.vim ] && ln -sfv ~/.vimrc ~/.config/nvim/init.vim
  fi

  # enable vim-plug
  fresh junegunn/vim-plug plug.vim --file=~/.vim/autoload/plug.vim
fi

if [ -e /etc/debian_version ]
then
  fresh blyork/apt-history apt-history --bin
fi

# don't install stuff in root's home
if [[ "$USER" != 'root' ]]
then
  if command -v pacman &> /dev/null
  then
    fresh giddie/bits-n-pieces pacman-undo/pacman-undo --bin
    fresh oshazard/apacman apacman --bin
  fi

  if command -v conky &> /dev/null
  then
    fresh "config/conkyrc/$(hostname)" --file=~/.conkyrc --ignore-missing
  fi

  if command -v bspwm &> /dev/null
  then
    [[ -d ~/.config/bspwm ]] || mkdir -p ~/.config/bspwm
    [[ -d ~/.config/sxhkd ]] || mkdir -p ~/.config/sxhkd
    fresh config/bspwm/bspwmrc --bin=~/.config/bspwm/bspwmrc
    fresh config/sxhkd/sxhkdrc --file=~/.config/sxhkd/sxhkdrc
  fi

  fresh "config/xprofile_$(hostname)" --file=~/.xprofile --ignore-missing
  fresh "config/tint3rc_$(hostname)" --file=~/.tint3rc --ignore-missing
fi

if command -v tmux &> /dev/null
then
  [[ ! -d ~/.tmux/plugins ]] && mkdir -vp ~/.tmux/plugins
  [[ ! -d ~/.tmux/plugins/tpm ]] && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm/
  fresh config/tmux.conf --file=~/.tmux.conf
fi

if command -v screen &> /dev/null
then
  fresh config/screenrc --file
fi

if command -v git &> /dev/null
then
  fresh git/config --file=~/.gitconfig
  fresh git/ignore --file=~/.gitignore
  mkdir -vp ~/.git_template
  ln -sf ~/.dotfiles/git/template/hooks ~/.git_template/
fi

if command -v gpg-agent &> /dev/null
then
  fresh config/gpg.conf --file=~/.gnupg/gpg.conf
  fresh config/gpg-agent.conf --file=~/.gnupg/gpg-agent.conf
fi

if command -v rubocop &> /dev/null
then
  fresh config/rubocop.yml --file
fi

if command -v solargraph &> /dev/null
then
  fresh config/solargraph.yml --file
fi

if command -v top &> /dev/null
then
  fresh config/toprc --file
fi

if [[ "$OS" == "Darwin" ]]; then
  fresh config/finicky.js --file
fi

if [ ! -e /etc/inputrc ]
then
  fresh config/inputrc --file
fi

if [[ -e $HOME/.ssh/config ]] && grep -q ControlMaster "$HOME/.ssh/config"
then
  fresh ClockworkNet/cmc cmc --bin
fi

if command -v bat &> /dev/null
then
  [[ ! -d ~/.config/bat ]] && mkdir -vp ~/.config/bat
  fresh config/bat --file=~/.config/bat/config
fi

fresh_after_build() {
  [ -e "$HOME/.toprc" ] && chmod 0600 "$HOME/.toprc"

  # return true so that we don't mess up the return code from fresh itself
  true
}
